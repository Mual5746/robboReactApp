{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","constants.js","containers/App.js","actions.js","registerServiceWorker.js","reducer.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","this","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.291ce912.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name, email, id}) => {\n    //const {name, email, id} = props;\n return (\n    <div className ='tc bg-light-green dib br3 pa3 ma3 grow bw2 shadow-5' >\n        < img  alt=\"photo\" src={`https://robohash.org/${id}?size=200x200`}/>\n        <div>\n            <h2> {name}</h2>\n            <p>{email}</p>\n        </div>\n    </div>\n );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n    \n// const Cardcomponent = robots.map( (user, i) => {       \n    return (\n        //<div>\n        // < Card id={robots[0].id} name = {robots[0].name} email = {robots[0].email} />\n        //</div>\n        //\n        <div>\n        {\n            robots.map( (user, i) => {\n                return ( \n                    < Card \n                        key = {i} \n                        id={robots[i].id} \n                        name = {robots[i].name} \n                        email = {robots[i].email}\n                    />\n                );\n            })\n        }\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n    return (\n        <div className = 'pa2' >\n           <input \n           className = 'pa3 ba b--green bg-lightest-blue'\n           type = 'search' \n           placeholder ='Search robots' \n           onChange = {searchChange}\n           />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style ={{ overflowY: 'scroll', border: '3px solid black', height: '700px'}}  >\n            {props.children}\n        </div>\n    )\n    \n}\n\nexport default Scroll; ","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","//import React, { useState, useEffect, Component } from 'react';\nimport React, {  Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => {\n    return {\n        //searchField: state.searchRobots.searchField,\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange:(event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n    \n}\n\nclass App extends Component {\n\n      //redux don need constructor \n      /*\n      constructor() {\n        super()\n        this.state = {\n            robots: [],\n            //searchfield: ''\n        }\n      } \n      */\n\n\n    // const [robots, setRobots] = useState([])\n    // const [searchfield, setSearchfield] = useState('')\n    // const [count, setCount] = useState(0)\n    componentDidMount() {\n        //console.log(this.props.store.getState())  //-->searchfield: ''\n        //  fetch('https:  //jsonplaceholder.typicode.com/users')\n        //     .then(response => response.json())\n        //     .then(users => { this.setState({ robots: users }) });\n\n        this.props.onRequestRobots();\n\n    }\n    // useEffect( () => {\n    //     fetch('https://jsonplaceholder.typicode.com/users')\n    //         .then(response => response.json())\n    //         .then(users => { setRobots( users) });\n    //     console.log(count)\n    // }, [count]) //only run when the count changes\n\n    // const onSearchChange = (event) => {\n    //     setSearchfield(event.target.value )\n    // }\n\n     /*\n    //replae by redux\n    onSearchChange = (event) => {\n        this.setState({ searchfield: event.target.value })\n      }\n      */\n\n    render() {\n        //const { robots } = this.state;\n        const {  searchField, onSearchChange, robots, isPending} = this.props;\n        const filteredRobots = robots.filter(robot =>{\n          return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        })\n        //return !robots.length ?\n        //redux---\n        return isPending?\n          <h1>Loading</h1> :\n          (\n            <div className='tc'>\n              <h1 className='f1'>RoboFriends</h1>\n              <SearchBox searchChange={onSearchChange}/>\n              <Scroll>\n                <CardList robots={filteredRobots} />\n              </Scroll>\n            </div>\n          );\n      }\n    }\n    // render() {\n    //     const { robots, searchfield } = this.state;\n    //     const filteredRobots = robots.filter(robot => {\n    //         return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    //     })\n    //     console.log(robots, searchfield)\n    //     return !robots.length ?\n    //         <h1>Loading</h1> :\n    //         (\n    //             <div className='tc'>\n    //                 <h1 className='f1'>RoboFriends</h1>\n    //                 <button onClick = {()=>setCount(count+1)}  > Click Me! </button>\n    //                 <SearchBox searchChange={onSearchChange} />\n    //                 <Scroll>\n    //                     <CardList robots={filteredRobots} />\n    //                 </Scroll>\n    //             </div>\n    //         );\n    // }\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants.js'\n\n\n// export const setSearchField = (text ) => ({\n//     type: 'CHANGE_SEARCH_FIELD',\n//     payload: text \n// })\n\nexport const setSearchField = (text) => ({ type: CHANGE_SEARCH_FIELD, payload: text })\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch ({ type: REQUEST_ROBOTS_PENDING })\n    fetch('https://jsonplaceholder.typicode.com/users')\n       .then(response => response.json())       \n       .then( data => dispatch ({type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n       .catch(error => dispatch ({type: REQUEST_ROBOTS_FAILED, payload: error}))\n       \n       \n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Lets check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl);\n        } else {\n          // Is not local host. Just register service worker\n          registerValidSW(swUrl);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        if (\n          response.status === 404 ||\n          response.headers.get('content-type').indexOf('javascript') === -1\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }","//import {CHANGE_SEARCH_FIELD} from './constants'\nimport {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants.js'\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n    switch(action.type){\n        case CHANGE_SEARCH_FIELD :\n          return Object.assign({}, state, {searchField: action.payload});\n        default:\n            return state; \n    }\n}\n\nconst initialStateRobots ={\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n    switch (action.type){\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, {isPending: true})\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, {robots: action.payload, isPending: false })\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state , { error: action.payload, isPending: false})\n        default: \n             return state; \n\n    }\n}","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { searchRobots,requestRobots } from './reducer';\nimport 'tachyons';\n\n\nconst logger = createLogger(); \n\nconst rootReducer = combineReducers ({searchRobots,requestRobots })\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n                <Provider store ={store} >\n                 <App />\n                </Provider>, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}