{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","registerServiceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","useState","setRobots","setSearchfield","count","setCount","useEffect","fetch","then","response","json","users","console","log","filteredRobots","filter","robot","toLowerCase","includes","length","onClick","event","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.c3739883.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name, email, id}) => {\n    //const {name, email, id} = props;\n return (\n    <div className ='tc bg-light-green dib br3 pa3 ma3 grow bw2 shadow-5' >\n        < img  alt=\"photo\" src={`https://robohash.org/${id}?size=200x200`}/>\n        <div>\n            <h2> {name}</h2>\n            <p>{email}</p>\n        </div>\n    </div>\n );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n    \n// const Cardcomponent = robots.map( (user, i) => {       \n    return (\n        //<div>\n        // < Card id={robots[0].id} name = {robots[0].name} email = {robots[0].email} />\n        //</div>\n        //\n        <div>\n        {\n            robots.map( (user, i) => {\n                return ( \n                    < Card \n                        key = {i} \n                        id={robots[i].id} \n                        name = {robots[i].name} \n                        email = {robots[i].email}\n                    />\n                );\n            })\n        }\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n    return (\n        <div className = 'pa2' >\n           <input \n           className = 'pa3 ba b--green bg-lightest-blue'\n           type = 'search' \n           placeholder ='Search robots' \n           onChange = {searchChange}\n           />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style ={{ overflowY: 'scroll', border: '3px solid black', height: '700px'}}  >\n            {props.children}\n        </div>\n    )\n    \n}\n\nexport default Scroll; ","import React, { useState, useEffect } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\nfunction App () {\n    // constructor() {\n    //     super()\n    //     this.state = {\n    //         robots: [],\n    //         searchfield: ''\n    //     }\n    // }\n    const [robots, setRobots] = useState([])\n    const [searchfield, setSearchfield] = useState('')\n    const [count, setCount] = useState(0)\n    // componentDidMount() {\n    //     fetch('https://jsonplaceholder.typicode.com/users')\n    //         .then(response => response.json())\n    //         .then(users => { this.setState({ robots: users }) });\n    // }\n    useEffect( () => {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(users => { setRobots( users) });\n        console.log(count)\n    }, [count]) //only run when the count changes\n\n    const onSearchChange = (event) => {\n        setSearchfield(event.target.value )\n    }\n\n    //render() {\n        //const { robots, searchfield } = this.state;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n        })\n        console.log(robots, searchfield)\n        return !robots.length ?\n            <h1>Loading</h1> :\n            (\n                <div className='tc'>\n                    <h1 className='f1'>RoboFriends</h1>\n                    <button onClick = {()=>setCount(count+1)}  > Click Me! </button>\n                    <SearchBox searchChange={onSearchChange} />\n                    <Scroll>\n                        <CardList robots={filteredRobots} />\n                    </Scroll>\n                </div>\n            );\n    }\n\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Lets check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl);\n        } else {\n          // Is not local host. Just register service worker\n          registerValidSW(swUrl);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        if (\n          response.status === 404 ||\n          response.headers.get('content-type').indexOf('javascript') === -1\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}